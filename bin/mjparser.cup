

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID, INTERFACE, DOUBLEDOT;
terminal SET, EXTENDS, NEW, DOT, EQUALSTO, DIV, MINUS, RSQBRACE, MINUSMINUS, PLUSPLUS, CONST, AND, UNION, LSQBRACE;
terminal LESS, EGREATER, MOD, MUL, BREAK, READ, MAP, GREATER, DIFFERENT, WHILE, DO, CLASS, ELESS, CONTINUE, OR;
terminal Character CHAR;
terminal Integer NUMBER;
terminal String IDENT;
terminal IF, ELSE;
terminal String BOOL;


nonterminal ConstVarDeclList, ConstVarDecl, MoreConstsList, VarDecl, ConstType, ConstDecl;
nonterminal VarDeclWithoutSemi, VarDeclList;
nonterminal MethodDeclList, OptionalFormPars, FormPars, FormParsList, MethodVars;
nonterminal StatementList, Statement, IfStatement, NumConstList, DesignatorStatement, DesignatorIdentOrExpr, DesignatorIdentOrExprList;
nonterminal Assignop, Relop, Addop, Mulop, Setop, Label, ActPars, ActParsExprList, AddopTermList, MulopFactorList, OptActPars;
nonterminal OptionalParens, ExprOrActPars, Condition, CondTerm, CondTermList, CondFactList;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, Program, Designator, MethodDecl, MethodSignature;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Factor, Term, Expr, CondFact;

precedence left ELSE;

/* program */
Program ::= (Program) PROG ProgramName:pn ConstVarDeclList LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT:programName;

ConstVarDeclList ::= ConstVarDeclList ConstVarDecl | ;

ConstVarDecl ::= ConstDecl | VarDecl 
						//|
						//error SEMI:l
						//{: parser.report_error("Izvrsen oporavak od greske do ; u liniji " + lleft, null); :}
						//|
						//error COMMA:l
						//{: parser.report_error("Izvrsen oporavak od greske do , u liniji " + lleft, null); :}
						;
/* kraj program */


/* Deklaracija konstanti */
									
ConstDecl ::= (ConstDecl) CONST Type IDENT:constName EQUAL ConstType MoreConstsList SEMI;

MoreConstsList ::= (MoreConstsList1) COMMA IDENT:constName EQUAL ConstType MoreConstsList | (NoMoreConstsList) ;

ConstType ::= (ConstTypeNumber) NUMBER | (ConstTypeChar) CHAR | (ConstTypeBool) BOOL;

Type ::= (Type) IDENT:typeName;

/* Kraj Deklaracija konstanti */


/* Deklaracija varijabli */
VarDecl ::= (VarDecl) Type:varType VarDeclWithoutSemi SEMI;

VarDeclWithoutSemi ::= (ArrayVarDecl) IDENT:varName LSQBRACE RSQBRACE VarDeclList | (NonArrayVarDecl) IDENT:varName VarDeclList;

VarDeclList::= COMMA VarDeclWithoutSemi | ;
/* Kraj Deklaracija varijabli */



/* Deklaracija metoda */
MethodDeclList ::= MethodDecl MethodDeclList | ;

MethodDecl ::= (MethodDecl) MethodSignature MethodVars LBRACE StatementList RBRACE;

MethodSignature ::= (NonVoidMethodSignature) Type IDENT LPAREN OptionalFormPars RPAREN
					|
					(VoidMethodSignature) VOID IDENT:methodName LPAREN OptionalFormPars RPAREN
					;

OptionalFormPars ::= FormPars | ;

FormPars ::= Type IDENT LSQBRACE RSQBRACE FormParsList | Type IDENT FormParsList;

FormParsList ::= COMMA FormPars | ;

MethodVars ::= VarDecl MethodVars | ;
/* Kraj Deklaracija metoda */



/* Statement */
StatementList ::= Statement StatementList | ;

Statement ::= 		DesignatorStatement SEMI
				 |
				  	LBRACE StatementList RBRACE
				 | 
				 	BREAK SEMI 
				 | 
				 	CONTINUE SEMI 
				 | 
				 	RETURN Expr SEMI
				 | 
				 	RETURN SEMI
				 | 
				 	(ReadStatement) READ LPAREN Designator RPAREN SEMI 
				 | 
				 	(PrintStatement) PRINT LPAREN Expr NumConstList RPAREN SEMI 
				 | 
				 	IfStatement
			 	//|
					//error SEMI:l
					//{: parser.report_error("Izvrsen oporavak od greske do ; u liniji " + lleft, null); :}
				 ;
				 	
IfStatement ::= IF LPAREN Condition RPAREN Statement | IF LPAREN Condition RPAREN Statement ELSE Statement;

Condition ::= CondTerm CondTermList;
CondTermList ::= OR CondTerm CondTermList | ;
CondTerm ::= CondFact CondFactList;
CondFactList ::= AND CondFact CondFactList | ;
CondFact ::= (CondFactWithoutRelop) Expr | (CondFactWithRelop) Expr Relop Expr;
				 	
NumConstList ::= COMMA NUMBER NumConstList | ;

DesignatorStatement ::= (DesignatorStatementAssignopExpression) Designator Assignop Expr
						|
						(DesignatorStatementPlusPlus) Designator PLUSPLUS
						|
						(DesignatorStatementMinusMinus) Designator MINUSMINUS
						|
						Designator LPAREN  RPAREN
						|
						(Function) Designator LPAREN ActPars RPAREN
						|
						(DesignatorStatementSetop) Designator Assignop Designator Setop Designator
						;

Designator ::= (Designator1) IDENT:designatorName //DesignatorIdentOrExprList;
				|
			   (DesignatorElemOfArray) IDENT:designatorName LSQBRACE Expr RSQBRACE;

DesignatorIdentOrExprList ::= DesignatorIdentOrExpr DesignatorIdentOrExprList | ;

DesignatorIdentOrExpr ::= DOT IDENT | (DesignatorExpr) LSQBRACE Expr RSQBRACE ;

/* Kraj Statement */



/* Expr */
Expr ::= (TermExpression) Term AddopTermList | (MinusTermExpression) MINUS Term AddopTermList ;

AddopTermList ::= (AddopTermList1) AddopTermList Addop Term | (NoAddopTermList);

ActPars ::= Expr ActParsExprList;

ActParsExprList ::= COMMA Expr ActParsExprList | ;

Term ::= (Term) Factor MulopFactorList;

MulopFactorList ::= (MulopFactorList1) MulopFactorList Mulop Factor | (NoMulopFactorList) ;

Factor ::= (NumFactor) NUMBER:value
			 | 
			(CharFactor) CHAR:value
			 |
			(BoolFactor) BOOL:value 
			 | 
			(ExprFactor) LPAREN Expr RPAREN 
			 | 
			(DesignatorFactor) Designator OptionalParens 
			 | 
			(NewTypeFactor) NEW Type ExprOrActPars
			 ;

OptionalParens ::= LPAREN ActPars RPAREN | LPAREN RPAREN | ;

ExprOrActPars ::= (ExprOrActPars1) LSQBRACE Expr RSQBRACE | LPAREN OptActPars RPAREN ;

/* Kraj Expr */



/* Opps */

Assignop ::= EQUAL;

Relop ::= EQUALSTO | DIFFERENT | GREATER | EGREATER | LESS | ELESS;

Addop ::= (AddopPlus) PLUS | (AddopMinus) MINUS;

Mulop ::= (MulopMul) MUL | (MulopDiv) DIV | (MulopMod) MOD;

Setop ::= UNION;

//Label ::= IDENT;

/* Kraj Opps */
